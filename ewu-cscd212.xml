<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE module PUBLIC "-//Checkstyle//DTD Checkstyle Configuration 1.3//EN" "https://checkstyle.org/dtds/configuration_1_3.dtd">

<!--
    This configuration file was written by the eclipse-cs plugin configuration editor
-->
<!--
    Checkstyle-Configuration: EWU-CSCD212
    Description: none
-->
<module name="Checker">
    <property name="fileExtensions" value="java"/>
    <!--
        Checks for Size Violations.
        See http://checkstyle.sf.net/config_sizes.html
    -->
    <module name="LineLength">
        <property name="severity" value="info"/>
        <property name="id" value="MainLineLength"/>
        <property name="max" value="120"/>
    </module>
    <module name="LineLength">
        <property name="severity" value="info"/>
        <property name="id" value="TestLineLength"/>
        <property name="max" value="120"/>
        <!-- ignore test method definitions -->
        <property name="ignorePattern" value="^ *void.*\(.*\) \{$"/>
    </module>

    <module name="TreeWalker">

        <!--
            Checks for blocks.
            See http://checkstyle.sf.net/config_blocks.html
        -->
        <module name="AvoidNestedBlocks">
            <property name="severity" value="info"/>
        </module>
        <module name="EmptyBlock">
            <property name="severity" value="info"/>
        </module>
        <module name="EmptyCatchBlock">
            <property name="severity" value="warning"/>
        </module>
        <module name="NeedBraces">
            <property name="severity" value="info"/>
        </module>

        <!--
            Checks for class design
            See http://checkstyle.sf.net/config_design.html
        -->
        <module name="FinalClass">
            <property name="severity" value="info"/>
        </module>
        <module name="OneTopLevelClass">
            <property name="severity" value="info"/>
        </module>
        <module name="ThrowsCount">
            <property name="severity" value="info"/>
        </module>

        <!--
            Checks for common coding problems
            See http://checkstyle.sf.net/config_coding.html
        -->
        <module name="CovariantEquals">
            <property name="severity" value="info"/>
        </module>
        <module name="DefaultComesLast">
            <property name="severity" value="info"/>
        </module>
        <module name="EmptyStatement">
            <property name="severity" value="info"/>
        </module>
        <module name="EqualsHashCode">
            <property name="severity" value="info"/>
        </module>
        <module name="HiddenField">
            <property name="severity" value="info"/>
            <property name="ignoreConstructorParameter" value="true"/>
            <property name="ignoreSetter" value="true"/>
            <property name="setterCanReturnItsClass" value="true"/>
        </module>
        <module name="IllegalInstantiation">
            <property name="severity" value="info"/>
        </module>
        <module name="InnerAssignment">
            <property name="severity" value="info"/>
        </module>
        <module name="MissingSwitchDefault">
            <property name="severity" value="info"/>
        </module>
        <module name="NestedForDepth">
            <property name="severity" value="info"/>
            <property name="max" value="3"/>
            <message key="nested.for.depth"
                     value="Loops are too heavily nested; code should either be simplified or refactored"/>
        </module>
        <module name="NestedIfDepth">
            <property name="severity" value="info"/>
            <property name="max" value="3"/>
            <message key="nested.if.depth"
                     value="If statements are too heavily nested; code should either be simplified or refactored"/>
        </module>
        <module name="NestedTryDepth">
            <property name="severity" value="info"/>
        </module>
        <module name="NoFinalizer">
            <property name="severity" value="warning"/>
        </module>
        <module name="OneStatementPerLine">
            <!--      check if this need to be warring-->
            <property name="severity" value="info"/>
        </module>
        <module name="SimplifyBooleanExpression">
            <property name="severity" value="info"/>
            <message key="simplify.expression"
                     value="Boolean expression can be simplified (poor boolean zen)"/>
        </module>
        <module name="SimplifyBooleanReturn">
            <property name="severity" value="info"/>
            <message key="simplify.boolreturn"
                     value="Boolean return code can be simplified (poor boolean zen)"/>
        </module>
        <module name="SuperClone">
            <property name="severity" value="warning"/>
        </module>
        <module name="SuperFinalize">
            <property name="severity" value="info"/>
        </module>

        <!--
            Checks for imports
            See http://checkstyle.sf.net/config_import.html
        -->
        <module name="AvoidStarImport">
            <property name="severity" value="info"/>
            <property name="excludes"
                      value="javax.swing, java.awt, org.junit.Assert, org.junit.jupiter.api.Assertions"/>
        </module>
        <module name="RedundantImport">
            <property name="severity" value="warning"/>
        </module>
        <module name="UnusedImports">
            <property name="severity" value="warning"/>
        </module>

        <!--
            Checks for metrics
            See http://checkstyle.sf.net/config_metrics.html
        -->
        <module name="BooleanExpressionComplexity">
            <property name="severity" value="info"/>
            <property name="max" value="4"/>
        </module>
        <module name="CyclomaticComplexity">
            <property name="severity" value="info"/>
            <property name="max" value="20"/>
            <message key="cyclomaticComplexity"
                     value="Method is too complex: simplify the control flow or refactor into helper methods."/>
        </module>

        <!--
            Miscellaneous other checks.
            See http://checkstyle.sf.net/config_misc.html
        -->
        <module name="ArrayTypeStyle">
            <property name="severity" value="info"/>
        </module>
        <module name="CommentsIndentation">
            <property name="severity" value="info"/>
        </module>
        <module name="TodoComment">
            <property name="severity" value="warning"/>
            <property name="format" value="(TODO)|(todo)|(FIXME)|(fixme)"/>
            <message key="todo.match"
                     value="Found a stray TODO/FIXME comment"/>
        </module>
        <module name="UpperEll">
            <property name="severity" value="warning"/>
        </module>

        <!--
            Modifier Checks
            See http://checkstyle.sf.net/config_modifiers.html
        -->
        <module name="ModifierOrder">
            <property name="severity" value="info"/>
        </module>

        <!--
            Checks for Naming Conventions.
            See http://checkstyle.sf.net/config_naming.html
        -->
        <module name="ConstantName">
            <property name="severity" value="info"/>
            <property name="format" value="^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$"/>
            <message key="name.invalidPattern"
                     value="Constant ''{0}'' must be in ALL_CAPS."/>
        </module>
        <module name="LocalFinalVariableName">
            <property name="severity" value="info"/>
            <property name="format" value="^([A-Z][0-9]*|[a-z][a-zA-Z0-9]*)$"/>
            <message key="name.invalidPattern"
                     value="Local final variable ''{0}'' must be in camelCase, or consist of a single upper-case letter."/>
        </module>
        <module name="LocalVariableName">
            <property name="severity" value="info"/>
            <property name="format" value="^([A-Z][0-9]*|[a-z][a-zA-Z0-9]*)$"/>
            <message key="name.invalidPattern"
                     value="Local variable ''{0}'' must be in camelCase, or consist of a single upper-case letter."/>
        </module>
        <module name="MemberName">
            <property name="severity" value="info"/>
            <property name="format" value="^_?[a-z][a-zA-Z0-9]*$|_?[A-Z]$"/>
            <message key="name.invalidPattern"
                     value="Instance variable ''{0}'' must be in camelCase, and may start with an underscore."/>
        </module>
        <module name="MethodName">
            <property name="severity" value="info"/>
            <property name="format" value="^([A-Z][0-9]*|[a-z][a-zA-Z0-9]*)$"/>
            <message key="name.invalidPattern"
                     value="Method name ''{0}'' must be in camelCase, or consist of a single upper-case letter."/>
        </module>
        <module name="PackageName">
            <property name="severity" value="info"/>
            <property name="format"
                      value="^[a-z][a-z0-9_]*(\.[a-zA-Z_][a-zA-Z0-9_]*)*$"/>
            <message key="name.invalidPattern"
                     value="Package name ''{0}'' must start with a lower-case letter."/>
        </module>
        <module name="ParameterName">
            <property name="severity" value="info"/>
            <property name="format" value="^([A-Z][0-9]*|[a-z][a-zA-Z0-9]*)$"/>
            <message key="name.invalidPattern"
                     value="Parameter ''{0}'' must be in camelCase, or consist of a single upper-case letter."/>
        </module>
        <module name="StaticVariableName">
            <property name="severity" value="info"/>
            <property name="format" value="^_?[a-z][a-zA-Z0-9]*$|_?[A-Z]$"/>
            <message key="name.invalidPattern"
                     value="Static variable ''{0}'' must be in camelCase, or consist of a single upper-case letter, and may start with an underscore."/>
        </module>
        <module name="TypeName">
            <property name="severity" value="info"/>
            <property name="format" value="^[A-Z][A-Za-z0-9]*$"/>
            <message key="name.invalidPattern"
                     value="Type (class) name ''{0}'' must start with a capital letter."/>
        </module>
        <module name="ClassTypeParameterName">
            <property name="severity" value="info"/>
            <property name="format" value="^[A-Z][A-Za-z0-9]*$"/>
            <message key="name.invalidPattern"
                     value="Type parameter ''{0}'' must start with a capital letter."/>
        </module>
        <module name="MethodTypeParameterName">
            <property name="severity" value="info"/>
            <property name="format" value="^[A-Z][A-Za-z0-9]*$"/>
            <message key="name.invalidPattern"
                     value="Type parameter ''{0}'' must start with a capital letter."/>
        </module>

        <!--
            Checks for Size Violations.
            See http://checkstyle.sf.net/config_sizes.html
        -->
        <module name="ParameterNumber">
            <property name="severity" value="info"/>
            <property name="max" value="8"/>
        </module>

        <!--
             Checks for whitespace
             See http://checkstyle.sf.net/config_whitespace.html
         -->
        <module name="EmptyForInitializerPad">
            <property name="severity" value="info"/>
        </module>
        <module name="EmptyForIteratorPad">
            <property name="severity" value="info"/>
        </module>
        <module name="GenericWhitespace">
            <property name="severity" value="info"/>
        </module>
        <module name="MethodParamPad">
            <property name="severity" value="info"/>
        </module>
        <module name="NoWhitespaceAfter">
            <property name="severity" value="info"/>
            <property name="tokens" value="AT"/>
            <property name="tokens" value="BNOT"/>
            <property name="tokens" value="DEC"/>
            <property name="tokens" value="DOT"/>
            <property name="tokens" value="INC"/>
            <property name="tokens" value="LNOT"/>
            <property name="tokens" value="UNARY_MINUS"/>
            <property name="tokens" value="UNARY_PLUS"/>
            <property name="tokens" value="ARRAY_DECLARATOR"/>
            <property name="tokens" value="INDEX_OP"/>
            <property name="tokens" value="METHOD_REF"/>
        </module>
        <module name="NoWhitespaceBefore">
            <property name="severity" value="info"/>
        </module>
        <module name="NoWhitespaceBefore">
            <property name="severity" value="info"/>
            <property name="tokens" value="DOT"/>
            <property name="tokens" value="METHOD_REF"/>
            <property name="allowLineBreaks" value="true"/>
        </module>
        <module name="ParenPad">
            <property name="severity" value="info"/>
        </module>
        <module name="TypecastParenPad">
            <property name="severity" value="info"/>
        </module>
        <module name="WhitespaceAfter">
            <property name="severity" value="info"/>
        </module>
        <module name="WhitespaceAround">
            <property name="severity" value="info"/>
            <property name="allowEmptyConstructors" value="true"/>
            <property name="allowEmptyLambdas" value="true"/>
            <property name="allowEmptyMethods" value="true"/>
            <property name="allowEmptyTypes" value="true"/>
            <property name="allowEmptyLoops" value="true"/>
            <property name="tokens"
                      value="COLON, DO_WHILE, LAMBDA, LCURLY, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN, LITERAL_SWITCH, LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, QUESTION, RCURLY, SLIST, LITERAL_ASSERT, TYPE_EXTENSION_AND"/>
        </module>

        <!--
            EWU CSCD 212 Stu
        -->
        <module name="FinalLocalVariable">
            <property name="severity" value="error"/>
            <property name="tokens" value="PARAMETER_DEF"/>
        </module>
        <module name="RequireThis">
            <property name="severity" value="error"/>
            <property name="validateOnlyOverlapping" value="false"/>
        </module>
        <module name="MissingOverride">
            <property name="severity" value="error"/>
        </module>
    </module>
</module>
